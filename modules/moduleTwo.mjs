import { 
    SomeName, 
    plus, 
    minus as vichit, //переименование
    mult 
} from './moduleOne.mjs'; //переменная может быть любой


//import other  from './moduleOne.mjs' //переменная может быть любой  - в случае если один экспорт


const result = plus (2, 3);
console.log(result);


const result2 = plus (3, 4);
console.log(result2);

console.log(SomeName);


const a = vichit(10, 2);
console.log("минус", a);

console.log(mult(120, 20));

//Node.js поддерживает ES6 модули, начиная с версии 13
//Функция require() является частью спецификации CommonJS, которая была разработана в 2009 году.

// code .     - запуск папки в vs code

//Правила работы с модулями:
//1.Модули должны быть одноцелевыми (возможность многократного переиспользования)
//2. ВсЕ инструкции еxport внизу файла
//3. Все импорты тоже внизу
//4. По возможности использовать export default
//5. (В КОНТЕКТСЕ ФРЕЙМВОРКОВ) ИМПОРТИРОВАННЫЕ ПЕРЕМЕННЫЕ ИЗ ДРУГИХ ВНЕШНЕУСТАНОВЛЕННЫХ МОДУЛЕЙ  (УСТАНОВЛЕННЫХ с помощью npm) нужно указывать первыми а потом из собственных модулей






//когда мы скачали node мы одновременно скачали npm
//npx create-react-app my-app  -   создает новый проект React с именем my-app в текущей директории.

/*

Конечно, давайте разберем команду npx create-react-app my-app на части:

npx: Это инструмент, входящий в состав npm (Node Package Manager), который позволяет запускать пакеты npm без необходимости установки их глобально. Он используется для запуска пакетов npm, которые не были установлены локально или глобально.

create-react-app: Это имя пакета npm, который представляет собой инструмент командной строки для создания новых проектов React. Он автоматизирует процесс создания начальной структуры проекта React, включая конфигурацию, зависимости и файлы.

my-app: Это имя директории или проекта, который будет создан. В данном случае, это имя проекта React, который будет создан в текущей рабочей директории (если не указан путь к другой директории).

Таким образом, команда npx create-react-app my-app выполняет следующее: она использует инструмент npx, чтобы временно установить и запустить пакет create-react-app, который создает новый проект React с именем my-app в текущей директории.
*/






/*
npm (Node Package Manager) - это менеджер пакетов для языка программирования JavaScript, который широко используется в среде Node.js. Он предназначен для управления зависимостями JavaScript, включая библиотеки, фреймворки, плагины и другие инструменты, которые разработчики используют для создания веб-приложений.

Вот некоторые основные функции и возможности npm:

Установка пакетов: С помощью npm вы можете легко устанавливать пакеты из центрального репозитория npm или из локальных источников. Когда вы устанавливаете пакет, npm также устанавливает его зависимости, если они указаны в файле package.json.

Управление зависимостями: npm позволяет добавлять, обновлять и удалять зависимости из вашего проекта. Это делает процесс управления зависимостями более простым и удобным.

Сценарии (scripts): Вы можете определять сценарии в вашем файле package.json, которые будут выполняться с помощью команды npm run. Это позволяет вам выполнять различные задачи, такие как сборка, тестирование, запуск сервера и другие.

Публикация пакетов: Если вы создали свой собственный пакет, вы можете опубликовать его в репозитории npm, чтобы другие разработчики могли его использовать. Это делается с помощью команды npm publish.

Локальный кэш: npm кэширует загруженные пакеты локально на вашем компьютере, что позволяет ускорить процесс установки пакетов в будущем и экономит трафик интернета.

npm является одним из основных инструментов в экосистеме JavaScript и широко используется разработчиками для управления зависимостями и сборки проектов.

*/

//